{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BadaBoom","text":"<p>Library that parse and retrieve the 'Asteroids - NeoWs' database and fireballs database from NASA. It also provides simple programs to compute figures and statistical information. Database are provided by NASA, more information is available here.</p> <p>In this work, the focus is to better understand/visualize the events from out of the earth.</p>"},{"location":"#installation","title":"Installation","text":"<p>The following repository use poetry to handle its dependencies, to install badaboom you can type the following:</p> <pre><code>poetry install\n</code></pre>"},{"location":"#dev","title":"Dev","text":"<p>This project uses precommits, to enable them:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"#usage-and-example","title":"Usage and example","text":"<p>Examples are available with <code>compute_*_statistics</code> python scripts. Theses examples compute some plots and statistics. If you need help with it, you can type:</p> <pre><code>python compute_asteroids_statistics.py --help\npython compute_fireballs_statistics.py --help\n</code></pre> <p>More explanations are available on my Blog:</p> <ul> <li>surrounding asteroids.</li> <li>fireballs.</li> </ul>"},{"location":"references/init/","title":"Overview","text":"<p>This package provides python parsers for different NASA API.</p> <p>All parsers are located inside the <code>parsers</code> sub-package.</p>"},{"location":"references/parsers/","title":"Badaboom parsers","text":"<p>Contains all parsers to gather data from different NASA API.</p> <p>Each module is linked to a specific NASA API. Here is a brief list of the different modules:</p> <ul> <li><code>asteroid</code> that uses 'Asteroids - NeoWs' database.</li> <li><code>fireballs</code></li> </ul>"},{"location":"references/parsers/#fireballs","title":"Fireballs","text":"<p>Module defining functions to gather data from the NASA fireball database.</p> <p>More information there: https://ssd-api.jpl.nasa.gov/doc/fireball.html</p>"},{"location":"references/parsers/#badaboom.parsers.fireballs.gather_fireball_data","title":"<code>gather_fireball_data(api_location='https://ssd-api.jpl.nasa.gov/fireball.api')</code>","text":"<p>Parser that retrieve fireball data from NASA open database.</p> <p>Details of the API is there: https://ssd-api.jpl.nasa.gov/doc/fireball.html</p> <p>Parameters:</p> Name Type Description Default <code>api_location</code> <code>str</code> <p>address of the API, by default \"https://ssd-api.jpl.nasa.gov/fireball.api\"</p> <code>'https://ssd-api.jpl.nasa.gov/fireball.api'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Dataframe containing all data from the NASA fireball API. Energy of the dataframe is in giga joules.</p> Source code in <code>badaboom/parsers/fireballs.py</code> <pre><code>def gather_fireball_data(\n    api_location: str = \"https://ssd-api.jpl.nasa.gov/fireball.api\",\n) -&gt; pd.DataFrame:\n    \"\"\"Parser that retrieve fireball data from NASA open database.\n\n    Details of the API is there: https://ssd-api.jpl.nasa.gov/doc/fireball.html\n\n    Parameters\n    ----------\n    api_location : str, optional\n        address of the API, by default \"https://ssd-api.jpl.nasa.gov/fireball.api\"\n\n    Returns\n    -------\n    pd.DataFrame\n        Dataframe containing all data from the NASA fireball API.\n        Energy of the dataframe is in giga joules.\n    \"\"\"\n    database_json = requests.get(api_location).json()\n\n    # cast data\n    casted_data = []\n    for line in database_json[\"data\"]:\n        casted_data.append(\n            [\n                datetime.fromisoformat(line[0]),\n                float(line[1]) if line[1] is not None else float(\"NaN\"),\n                float(line[2]) if line[2] is not None else float(\"NaN\"),\n                float(line[3]) if line[3] is not None else float(\"NaN\"),\n                line[4],\n                float(line[5]) if line[5] is not None else float(\"NaN\"),\n                line[6],\n                float(line[7]) if line[7] is not None else float(\"NaN\"),\n                float(line[8]) if line[8] is not None else float(\"NaN\"),\n            ]\n        )\n\n    df = pd.DataFrame(casted_data, columns=database_json[\"fields\"])\n    df[\"energy\"] = df[\"energy\"] * 10\n    return df\n</code></pre>"},{"location":"references/parsers/#asteroids","title":"Asteroids","text":"<p>This module provides a parser to gather data from the 'Asteroids - NeoWs' database. Sources of the database: https://api.nasa.gov/</p>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser","title":"<code>AsteroidDatasetParser</code>","text":"<p>Parser to retrieve asteroids dataset from the open data provided by NASA.</p> <p>Compatible with the data: Asteroids - NeoWs</p> <p>The data will be stored into two dataframes. The first dataframe will store the events registered (in the df_neo_feed variable). The second dataframe will store the asteroid information (in the df_asteroids variable). These two dataframes can be joined using the asteroid ID.</p> Source code in <code>badaboom/parsers/asteroids.py</code> <pre><code>class AsteroidDatasetParser:\n    \"\"\"Parser to retrieve asteroids dataset from the open data provided by NASA.\n\n    Compatible with the data: Asteroids - NeoWs\n\n    The data will be stored into two dataframes.\n    The first dataframe will store the events registered (in the df_neo_feed variable).\n    The second dataframe will store the asteroid information (in the df_asteroids variable).\n    These two dataframes can be joined using the asteroid ID.\n    \"\"\"\n\n    def __init__(\n        self,\n        api_key: str,\n        local_neo_feed_datapath: str = \"neo_feed_data.csv\",\n        local_asteroid_datapath: str = \"asteroid_data.csv\",\n        api_location: str = \"https://api.nasa.gov/neo/rest/v1/\",\n    ) -&gt; None:\n        \"\"\"Prepare queries and load local data if it exists.\n\n        Parameters\n        ----------\n        api_key : str\n            Your API key provided by NASA, see https://api.nasa.gov/ for more details.\n        local_neo_feed_datapath : str, optional\n            Path where the events dataframe will be saved/loaded, by default \"neo_feed_data.csv\"\n        local_asteroid_datapath : str, optional\n            Path where the asteroids dataframe will be saved/loaded, by default \"asteroid_data.csv\"\n        api_location : _type_, optional\n            Url to the 'Asteroids - NeoWs' API, by default \"https://api.nasa.gov/neo/rest/v1/\"\n        \"\"\"\n        self.api_location = api_location\n        self.api_key = api_key\n        self.local_neo_feed_datapath = local_neo_feed_datapath\n        self.local_asteroid_datapath = local_asteroid_datapath\n\n        # Do a dummy request to check the remaining requests available\n        query = f\"feed?start_date=2015-12-30&amp;end_date=2015-12-30&amp;api_key={api_key}\"\n        r = requests.get(api_location + query)\n        self.remaining_requests = int(r.headers[\"X-RateLimit-Remaining\"])\n\n        # load existing dataframes and list known asteroids\n        if not exists(self.local_neo_feed_datapath):\n            self.df_neo_feed = pd.DataFrame([], columns=self.events_desc)\n            self.df_asteroids = pd.DataFrame([], columns=self.asteroids_desc)\n            self.known_asteroids = []\n        else:\n            self.df_neo_feed = pd.read_csv(self.local_neo_feed_datapath, parse_dates=[\"date\"])\n            self.df_asteroids = pd.read_csv(self.local_asteroid_datapath)\n            self.known_asteroids = self.df_asteroids[\"asteroid_id\"].to_list()\n\n    def retrieve_year_dataframe(self, year: int):\n        \"\"\"Return dataframe_corresponding to year.\n\n        Download the data if required and save it in the local database is required.\n        \"\"\"\n        begin_year = pd.Timestamp(year=year, month=1, day=1)\n        end_year = pd.Timestamp(year=year, month=12, day=31)\n\n        selected_df_neo_feed = self.df_neo_feed[\n            (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n        ]\n        selected_df_asteroids = self.df_asteroids[\n            self.df_asteroids[\"asteroid_id\"].isin(selected_df_neo_feed[\"asteroid_id\"])\n        ]\n\n        if len(selected_df_neo_feed) &lt;= 0 or selected_df_neo_feed[\"is_estimation\"].any():\n            # remove year data if any to be safe about estimations\n            index_to_remove = self.df_neo_feed[\n                (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n            ].index\n            self.df_neo_feed.drop(index_to_remove, inplace=True)\n\n            # fill year\n            start_date = begin_year\n            end_date = start_date + pd.Timedelta(days=6)\n            while start_date &lt;= end_year:  # TODO maybe a tqdm progress bar?\n                self._download_week_information(start_date, end_date)\n\n                # prepare next date\n                start_date = end_date + pd.Timedelta(days=1)\n                end_date = start_date + pd.Timedelta(days=6)\n                if end_date &gt; end_year:\n                    end_date = end_year\n\n            self.df_neo_feed.to_csv(self.local_neo_feed_datapath, sep=\",\", index=False)\n            self.df_asteroids.to_csv(self.local_asteroid_datapath, sep=\",\", index=False)\n\n            selected_df_neo_feed = self.df_neo_feed[\n                (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n            ]\n            selected_df_asteroids = self.df_asteroids[\n                self.df_asteroids[\"asteroid_id\"].isin(selected_df_neo_feed[\"asteroid_id\"])\n            ]\n\n        return selected_df_neo_feed, selected_df_asteroids\n\n    @property\n    def local_df_neo_feed(self) -&gt; pd.DataFrame:\n        \"\"\"Returns the dataframe of already collected information about events.\"\"\"\n        return self.df_neo_feed\n\n    @property\n    def local_df_asteroids(self) -&gt; pd.DataFrame:\n        \"\"\"Returns the dataframe of already collected information about asteroids.\"\"\"\n        return self.df_asteroids\n\n    def _download_week_information(self, start_date, end_date) -&gt; None:\n        \"\"\"The download is week by week as it is a limitation of the 'Asteroids - NeoWs' API.\n\n        It updates the dataframes.\n        Warning: It supposes the week does not exists in the local dataframes.\n        \"\"\"\n        if self.remaining_requests &lt; 1:\n            print(\"You have reached your hourly number of requests possible.\")\n            print(\"The program will pause for 1 hour to be able to retrieve the data.\")\n            sleep(3600)\n\n        query = f\"feed?start_date={start_date}&amp;end_date={end_date}&amp;api_key={self.api_key}\"\n        r = requests.get(self.api_location + query)\n        self.remaining_requests = int(r.headers[\"X-RateLimit-Remaining\"])\n\n        week_dict = r.json()\n\n        events_list = []\n        asteroids_list_to_add = []\n        today_timestamp = pd.Timestamp.today()\n        for event_date in week_dict[\"near_earth_objects\"]:\n            for asteroid_event in week_dict[\"near_earth_objects\"][event_date]:\n                event_timestamp = pd.Timestamp(event_date)\n                asteroid_id = int(asteroid_event[\"id\"])\n                events_list.append(\n                    [\n                        event_timestamp,\n                        asteroid_id,\n                        int(asteroid_event[\"neo_reference_id\"]),\n                        bool(asteroid_event[\"is_potentially_hazardous_asteroid\"]),\n                        event_timestamp &gt;= today_timestamp,\n                        float(\n                            asteroid_event[\"close_approach_data\"][0][\"relative_velocity\"][\n                                \"kilometers_per_second\"\n                            ]\n                        ),\n                        float(\n                            asteroid_event[\"close_approach_data\"][0][\"miss_distance\"][\"kilometers\"]\n                        ),\n                    ]\n                )\n\n                if asteroid_id not in self.known_asteroids:\n                    if (\n                        \"absolute_magnitude_h\" in asteroid_event.keys()\n                    ):  # this information is sometimes missing\n                        magnitude_info = float(asteroid_event[\"absolute_magnitude_h\"])\n                    else:\n                        magnitude_info = np.nan\n\n                    if (\n                        \"estimated_diameter\" not in asteroid_event.keys()\n                    ):  # this information is sometimes missing\n                        estimated_diameter_min = np.nan\n                        estimated_diameter_max = np.nan\n                    else:\n                        estimated_diameter_min = float(\n                            asteroid_event[\"estimated_diameter\"][\"kilometers\"][\n                                \"estimated_diameter_min\"\n                            ]\n                        )\n                        estimated_diameter_max = float(\n                            asteroid_event[\"estimated_diameter\"][\"kilometers\"][\n                                \"estimated_diameter_max\"\n                            ]\n                        )\n\n                    self.known_asteroids.append(asteroid_id)\n                    asteroids_list_to_add.append(\n                        [\n                            asteroid_id,\n                            int(asteroid_event[\"neo_reference_id\"]),\n                            asteroid_event[\"name\"],\n                            bool(asteroid_event[\"is_potentially_hazardous_asteroid\"]),\n                            bool(asteroid_event[\"is_sentry_object\"]),\n                            magnitude_info,\n                            asteroid_event[\"nasa_jpl_url\"],\n                            estimated_diameter_min,\n                            estimated_diameter_max,\n                        ]\n                    )\n\n        # update local df, it supposes the new week does not exist in the local dataframes\n        df_events = pd.DataFrame(events_list, columns=self.events_desc)\n        self.df_neo_feed = pd.concat([self.df_neo_feed, df_events], ignore_index=True).sort_values(\n            by=\"date\"\n        )\n        if len(asteroids_list_to_add) &gt; 0:\n            df_asteroids_to_add = pd.DataFrame(asteroids_list_to_add, columns=self.asteroids_desc)\n            self.df_asteroids = pd.concat(\n                [self.df_asteroids, df_asteroids_to_add], ignore_index=True\n            ).sort_values(by=\"asteroid_id\")\n\n    @property\n    def events_desc(self) -&gt; tuple[str]:\n        \"\"\"Return a tuple of string describing the events.\"\"\"\n        return (\n            \"date\",\n            \"asteroid_id\",\n            \"asteroid_neo_reference_id\",\n            \"is_potentially_hazardous_asteroid\",\n            \"is_estimation\",\n            \"relative_velocity_kms\",\n            \"miss_distance\",\n        )  # velocity in kilometers per secondes and distance in kilometers\n\n    @property\n    def asteroids_desc(self) -&gt; tuple[str]:\n        \"\"\"Return a tuple of string describing the asteroids.\"\"\"\n        return (\n            \"asteroid_id\",\n            \"asteroid_neo_reference_id\",\n            \"asteroid_name\",\n            \"is_potentially_hazardous_asteroid\",\n            \"is_sentry_object\",\n            \"absolute_magnitude_h\",\n            \"links\",\n            \"estimated_diameter_min\",  # in kilometers\n            \"estimated_diameter_max\",  # in kilometers\n        )\n</code></pre>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.asteroids_desc","title":"<code>asteroids_desc: tuple[str]</code>  <code>property</code>","text":"<p>Return a tuple of string describing the asteroids.</p>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.events_desc","title":"<code>events_desc: tuple[str]</code>  <code>property</code>","text":"<p>Return a tuple of string describing the events.</p>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.local_df_asteroids","title":"<code>local_df_asteroids: pd.DataFrame</code>  <code>property</code>","text":"<p>Returns the dataframe of already collected information about asteroids.</p>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.local_df_neo_feed","title":"<code>local_df_neo_feed: pd.DataFrame</code>  <code>property</code>","text":"<p>Returns the dataframe of already collected information about events.</p>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.__init__","title":"<code>__init__(api_key, local_neo_feed_datapath='neo_feed_data.csv', local_asteroid_datapath='asteroid_data.csv', api_location='https://api.nasa.gov/neo/rest/v1/')</code>","text":"<p>Prepare queries and load local data if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>Your API key provided by NASA, see https://api.nasa.gov/ for more details.</p> required <code>local_neo_feed_datapath</code> <code>str</code> <p>Path where the events dataframe will be saved/loaded, by default \"neo_feed_data.csv\"</p> <code>'neo_feed_data.csv'</code> <code>local_asteroid_datapath</code> <code>str</code> <p>Path where the asteroids dataframe will be saved/loaded, by default \"asteroid_data.csv\"</p> <code>'asteroid_data.csv'</code> <code>api_location</code> <code>_type_</code> <p>Url to the 'Asteroids - NeoWs' API, by default \"https://api.nasa.gov/neo/rest/v1/\"</p> <code>'https://api.nasa.gov/neo/rest/v1/'</code> Source code in <code>badaboom/parsers/asteroids.py</code> <pre><code>def __init__(\n    self,\n    api_key: str,\n    local_neo_feed_datapath: str = \"neo_feed_data.csv\",\n    local_asteroid_datapath: str = \"asteroid_data.csv\",\n    api_location: str = \"https://api.nasa.gov/neo/rest/v1/\",\n) -&gt; None:\n    \"\"\"Prepare queries and load local data if it exists.\n\n    Parameters\n    ----------\n    api_key : str\n        Your API key provided by NASA, see https://api.nasa.gov/ for more details.\n    local_neo_feed_datapath : str, optional\n        Path where the events dataframe will be saved/loaded, by default \"neo_feed_data.csv\"\n    local_asteroid_datapath : str, optional\n        Path where the asteroids dataframe will be saved/loaded, by default \"asteroid_data.csv\"\n    api_location : _type_, optional\n        Url to the 'Asteroids - NeoWs' API, by default \"https://api.nasa.gov/neo/rest/v1/\"\n    \"\"\"\n    self.api_location = api_location\n    self.api_key = api_key\n    self.local_neo_feed_datapath = local_neo_feed_datapath\n    self.local_asteroid_datapath = local_asteroid_datapath\n\n    # Do a dummy request to check the remaining requests available\n    query = f\"feed?start_date=2015-12-30&amp;end_date=2015-12-30&amp;api_key={api_key}\"\n    r = requests.get(api_location + query)\n    self.remaining_requests = int(r.headers[\"X-RateLimit-Remaining\"])\n\n    # load existing dataframes and list known asteroids\n    if not exists(self.local_neo_feed_datapath):\n        self.df_neo_feed = pd.DataFrame([], columns=self.events_desc)\n        self.df_asteroids = pd.DataFrame([], columns=self.asteroids_desc)\n        self.known_asteroids = []\n    else:\n        self.df_neo_feed = pd.read_csv(self.local_neo_feed_datapath, parse_dates=[\"date\"])\n        self.df_asteroids = pd.read_csv(self.local_asteroid_datapath)\n        self.known_asteroids = self.df_asteroids[\"asteroid_id\"].to_list()\n</code></pre>"},{"location":"references/parsers/#badaboom.parsers.asteroids.AsteroidDatasetParser.retrieve_year_dataframe","title":"<code>retrieve_year_dataframe(year)</code>","text":"<p>Return dataframe_corresponding to year.</p> <p>Download the data if required and save it in the local database is required.</p> Source code in <code>badaboom/parsers/asteroids.py</code> <pre><code>def retrieve_year_dataframe(self, year: int):\n    \"\"\"Return dataframe_corresponding to year.\n\n    Download the data if required and save it in the local database is required.\n    \"\"\"\n    begin_year = pd.Timestamp(year=year, month=1, day=1)\n    end_year = pd.Timestamp(year=year, month=12, day=31)\n\n    selected_df_neo_feed = self.df_neo_feed[\n        (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n    ]\n    selected_df_asteroids = self.df_asteroids[\n        self.df_asteroids[\"asteroid_id\"].isin(selected_df_neo_feed[\"asteroid_id\"])\n    ]\n\n    if len(selected_df_neo_feed) &lt;= 0 or selected_df_neo_feed[\"is_estimation\"].any():\n        # remove year data if any to be safe about estimations\n        index_to_remove = self.df_neo_feed[\n            (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n        ].index\n        self.df_neo_feed.drop(index_to_remove, inplace=True)\n\n        # fill year\n        start_date = begin_year\n        end_date = start_date + pd.Timedelta(days=6)\n        while start_date &lt;= end_year:  # TODO maybe a tqdm progress bar?\n            self._download_week_information(start_date, end_date)\n\n            # prepare next date\n            start_date = end_date + pd.Timedelta(days=1)\n            end_date = start_date + pd.Timedelta(days=6)\n            if end_date &gt; end_year:\n                end_date = end_year\n\n        self.df_neo_feed.to_csv(self.local_neo_feed_datapath, sep=\",\", index=False)\n        self.df_asteroids.to_csv(self.local_asteroid_datapath, sep=\",\", index=False)\n\n        selected_df_neo_feed = self.df_neo_feed[\n            (self.df_neo_feed[\"date\"] &gt;= begin_year) &amp; (self.df_neo_feed[\"date\"] &lt;= end_year)\n        ]\n        selected_df_asteroids = self.df_asteroids[\n            self.df_asteroids[\"asteroid_id\"].isin(selected_df_neo_feed[\"asteroid_id\"])\n        ]\n\n    return selected_df_neo_feed, selected_df_asteroids\n</code></pre>"}]}